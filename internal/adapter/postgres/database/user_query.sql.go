// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: user_query.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createUser = `-- name: CreateUser :one
INSERT INTO "users"(username,password,email,createAt) VALUES($1,$2,$3,$4) RETURNING id
`

type CreateUserParams struct {
	Username string
	Password []byte
	Email    string
	Createat time.Time
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.Username,
		arg.Password,
		arg.Email,
		arg.Createat,
	)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const createUserRole = `-- name: CreateUserRole :exec
INSERT INTO "user_roles"(user_id,role_id) VALUES($1,$2)
`

type CreateUserRoleParams struct {
	UserID uuid.UUID
	RoleID uuid.UUID
}

func (q *Queries) CreateUserRole(ctx context.Context, arg CreateUserRoleParams) error {
	_, err := q.db.Exec(ctx, createUserRole, arg.UserID, arg.RoleID)
	return err
}

const getUser = `-- name: GetUser :one
SELECT id, username, password, email, createat FROM "users" WHERE username = $1
`

func (q *Queries) GetUser(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRow(ctx, getUser, username)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Password,
		&i.Email,
		&i.Createat,
	)
	return i, err
}

const getUserRole = `-- name: GetUserRole :one
SELECT user_id, role_id FROM  "user_roles" WHERE user_id = $1
`

func (q *Queries) GetUserRole(ctx context.Context, userID uuid.UUID) (UserRole, error) {
	row := q.db.QueryRow(ctx, getUserRole, userID)
	var i UserRole
	err := row.Scan(&i.UserID, &i.RoleID)
	return i, err
}
